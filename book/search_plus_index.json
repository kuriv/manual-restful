{"./":{"url":"./","title":"RESTful","keywords":"","body":"RESTful REST 全称 Representational State Transfer ，表现层状态转移。 RESTful 是一种基于 REST 构建的网络应用程序的设计风格和开发方式。 "},"docs/URL 设计.html":{"url":"docs/URL 设计.html","title":"URL 设计","keywords":"","body":"URL 设计 动词 + 宾语 动词的覆盖 宾语必须是名词 复数 URL 避免多级 URL 动词 + 宾语 客户端发送的数据和操作指令都是以动词 + 宾语的结构。比如 GET /articles 这条命令中， GET 是动词， /articles 是宾语。动词通常有以下几种 HTTP 请求方法，对应程序的 CURD 操作。 # GET：读取（Read） # POST：新建（Create） # PUT：更新（Update） # PATCH：更新（Update），通常是部分更新 # DELETE：删除（Delete） 动词的覆盖 有些客户端只能使用 GET 和 POST 这两种方法，此时服务器必须接受 POST 模拟其他三个方法（ PUT 、 PATCH 、 DELETE ）。客户端发出的 HTTP 请求，要加上 X-HTTP-Method-Override 属性，告诉服务器应该使用哪一个动词来覆盖 POST 方法。 POST /articles/4 HTTP/1.1 X-HTTP-Method-Override: PUT 上面代码中， X-HTTP-Method-Override 指定本次请求的方法是 PUT ，而不是 POST 。 宾语必须是名词 宾语就是 API 的 URL ，是 HTTP 动词作用的对象，它应该是名词，不能是动词。比如， /articles 这个 URL 是正确的，而下面的 URL 不是名词，都是错误的。 # /getAllCars # /createNewCar # /deleteAllRedCars 复数 URL 既然 URL 是名词，那么名词应该使用复数形式还是单数形式？这没有统一的规定，但是常见的操作是读取一个集合，比如 GET /articles 用来读取所有的文章，这里明显应该是复数形式。因此，为了统一起见，建议都使用复数 URL 。 避免多级 URL 常见的情况是，资源需要多级分类，因此很容易写出多级的 URL ，比如获取某个作者的某一类文章。 # GET /authors/12/categories/2 这种 URL 不利于扩展，语义也不明确，往往要想一会，才能明白含义。而更好的做法是，除了第一级，其他级别都用查询字符串表达。 # GET /authors/12?categories=2 下面是另一个例子，用来查询已发布的文章。 # GET /articles?published=true "},"docs/状态码.html":{"url":"docs/状态码.html","title":"状态码","keywords":"","body":"状态码 HTTP 状态码 "},"docs/服务器响应.html":{"url":"docs/服务器响应.html","title":"服务器响应","keywords":"","body":"服务器响应 不要返回纯本文 发生错误时，不要返回 200 状态码 提供链接 不要返回纯本文 API 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准的结构化数据。所以，服务器回应的 HTTP 头的 Content-Type 属性要设为 application/json 。客户端请求时，也要明确告诉服务器，可以接受 JSON 格式，即请求的 HTTP 头的 Accept 属性也要设成 application/json 。 GET /articles/2 HTTP/1.1 Accept: application/json 发生错误时，不要返回 200 状态码 有一种不恰当的做法是，即使发生错误，也返回 200 状态码，把错误信息放在数据体里面，就像下面这样。 HTTP/1.1 200 OK Content-Type: application/json { \"status\": \"failure\", \"data\": { \"error\": \"Expected at least two items in list.\" } } 在上面代码中，只有解析数据体以后，才能得知操作失败，这种做法实际上取消了状态码，是完全不可取的。而正确的做法应该是，状态码反映发生的错误，具体的错误信息放在数据体里面返回。 HTTP/1.1 400 Bad Request Content-Type: application/json { \"error\": \"Invalid input.\", \"detail\": { \"surname\": \"This field is required.\" } } 提供链接 API 的使用者未必知道 URL 是怎么设计的，一个解决方法就是，在回应中给出相关链接，便于下一步操作。这样的话，用户只要记住一个 URL ，就可以发现其他的 URL ，这种方法叫做 HATEOAS 。例如， GitHub 的 API 都在 这个域名 ，访问它就可以得到其他的 URL 。 "}}